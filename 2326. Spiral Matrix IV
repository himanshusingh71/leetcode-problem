2326. Spiral Matrix IV

/*
Runtime: 317 ms, faster than 83.46% of C++ online submissions for Spiral Matrix IV.
Memory Usage: 135.1 MB, less than 15.50% of C++ online submissions for Spiral Matrix IV.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {
        
        if( m == 1 and n == 1 ) return {{head->val}};
        int r = 0 , c = 0;
        int initial_row = 0 , initial_col = 0;
        vector<vector<int>> ans;
        vector<int> temp;
        
        for(int i= 0 ;i<n;i++)
            temp.push_back(-1);
        
        for(int i=0;i<m;i++)
            ans.push_back(temp);
        
        while(head != NULL)
        {
            for(int i = 0; i< n-1 ;i++)
            {
                if( !head ) break;
                ans[r][c++] = head->val;
                head = head->next;
            }
          
           
            for(int i = 0;i<m-1;i++)
            {
                if(!head) break;
                
                ans[r++][c] = head->val;
                head=head->next;
            }
            
           
            for(int i = 0;i<n-1;i++)
            {
                if( !head ) break;
                
                ans[r][c--] = head->val;
                head = head->next;
            }
            
            
            for(int i = 0 ;i< m -1 ; i++)
            {
                if( !head ) break;
                ans[r--][c] = head->val;
                head = head->next;
            }
            
            n = n-2;
            m = m - 2;
            initial_row++;
            initial_col++;
            
            r = initial_row;
            c = initial_col;
            
        }
        
        return ans;
    }
};
