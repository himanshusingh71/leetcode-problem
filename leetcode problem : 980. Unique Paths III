980. Unique Paths III

/*
Runtime: 147 ms, faster than 8.93% of C++ online submissions for Unique Paths III.
Memory Usage: 77.9 MB, less than 6.45% of C++ online submissions for Unique Paths III.
*/

class Solution {
public:
    
    int can_be_visited;
    
    int paths=0;
   
    void recur(vector<vector<int>> & grid, vector<vector<int>> visited, int r , int c,int count )
    {
        if(r<0 or c <0) return;
        
        if(c>=grid[0].size() or r>= grid.size()) return;
        
        if(grid[r][c] == -1 )
        {
            return;
        }
        
        if(visited[r][c]) return ;
        else{
            visited[r][c] = 1;
            count++;
        }
        
        if(grid[r][c] == 2  )
        {
            if(count ==  can_be_visited )
            {
                paths++;
            }
            else{
               
                return;
            }
        }
        
        
        recur(grid,visited,r+1,c,count);
        recur(grid,visited,r-1,c,count);
        recur(grid,visited,r,c+1,count);
        recur(grid,visited,r,c-1,count);
        
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited;
        vector<int> temp(m,0);
        for(int i=0;i<n;i++)
            visited.push_back(temp);
        
        int negative = 0;
        pair<int,int> start;
     
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                if(grid[i][j] == 1 ){
                    start.first = i;
                    start.second = j;
                }
                else if(grid[i][j] == -1)
                {
                    negative++;
                }
                    
            }
        }
        
        can_be_visited =m*n-negative;
           
      
        int count = 0;
        recur(grid,visited,start.first,start.second,count);
        
        return paths;
        
    }
};
