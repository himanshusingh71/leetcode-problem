101. Symmetric Tree

class Solution {
public:
    bool check(vector<TreeNode*> x)
    {
        for(int i=0,j=x.size()-1;i<x.size()&&j>=0;i++,j--)
        {
            if(x[i]==NULL&&x[j]==NULL)
                continue;
            if(x[i]==NULL&&x[j]!=NULL)
                return false;
            else if(x[i]!=NULL&&x[j]==NULL)
                return false;
            else if(x[i]->val!=x[j]->val)
                return false;
        }
        return true;
    }
    bool isSymmetric(TreeNode* root) {
        bool repeat = true;
        vector<TreeNode* >  t= {root};
          vector<TreeNode*> temp;
        while(repeat)
        {
       
      
            repeat = false;
        for(int i=0;i<t.size();i++)
        {
            if(t[i]!=NULL)
            temp.push_back(t[i]->left);
            if(t[i]!=NULL)
            temp.push_back(t[i]->right);
            if(t[i]!=NULL)
            if(t[i]->left!=NULL||t[i]->right!=NULL)
                 repeat = true;
            
        }
            if(!check(temp))
            {
                return false;
            }
            t.clear();
            t=temp;
            temp.clear();
            
        }
        return true;
        
    }
};
