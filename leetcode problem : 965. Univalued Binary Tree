965. Univalued Binary Tree

/*
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Univalued Binary Tree.
Memory Usage: 9.9 MB, less than 78.21% of C++ online submissions for Univalued Binary Tree.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool find(TreeNode * root,int val)
    {
        if( !root ) return true;
        if( root->val != val) return false;
        return find(root->left,val) and find(root->right,val);
    }
    bool isUnivalTree(TreeNode* root) {
        if(!root) return true;
        return find(root,root->val);
    }
};
