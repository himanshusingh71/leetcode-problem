508. Most Frequent Subtree Sum

/*
Runtime: 66 ms, faster than 5.58% of C++ online submissions for Most Frequent Subtree Sum.
Memory Usage: 24.7 MB, less than 46.43% of C++ online submissions for Most Frequent Subtree Sum.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    map<int,int> freq;
    int maxi = INT_MIN;
    void dfs(TreeNode*r)
    {
        if(!r) return;
        int curr_sum = getSum(r);
        freq[curr_sum]++;
             maxi = max(maxi,freq[curr_sum]);
        dfs(r->left);
        dfs(r->right);
    }
    
    int getSum(TreeNode*r)
    {
        if(!r) return 0;
        return r->val + getSum(r->left) + getSum(r->right);
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        dfs(root);
        vector<int> vec;
      for(auto it:freq)
      {
          if(it.second == maxi) vec.push_back(it.first);
      }
        return vec;
    }
};
