289. Game of Life

/*
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Game of Life.
Memory Usage: 7 MB, less than 20.27% of C++ online submissions for Game of Life.
*/

class Solution {
public:
    vector<vector<int>> ans;
    bool checking(vector<vector<int>> & board,int r,int c)
    {
        int live_around = 0;
        if( r > 0 )
        {
            live_around += board[r-1][c];
        }
         if( c > 0)
        {
            live_around += board[r][c-1];
        }
        if( r < board.size() - 1)
        {
            live_around += board[r+1][c];
        }
        if( c < board[0].size()-1)
        {
            live_around += board[r][c+1];
        }
        if(( r  < board.size() -1) and ( c < board[0].size() -1 ) )
        {
            live_around += board[r+1][c+1];
        }
        if( ( r  > 0) and ( c > 0 ))
        {
            live_around += board[r-1][c-1];
        }
        if((r < board.size() -1 ) and ( c > 0))
        {
            live_around += board[r+1][c-1];
        }
        if((r > 0) and ( c < board[0].size() -1))
        {
            live_around += board[r-1][c+1];
        }
        if( board[r][c]) // live cell
        {
            if( live_around < 2 or live_around > 3)
                return false;
            if(live_around ==2 or live_around == 3)
                return true;
             
        }
      else  {
            if(live_around == 3)
                return true;
        
        }
        return false;
    }
    void gameOfLife(vector<vector<int>>& board) {
        // making ans as 0
        vector<int> temp;
        for(int i=0;i<board.size();i++)
        {
            temp.clear();
            for(int j=0;j<board[i].size();j++)
                   temp.push_back(0);
            ans.push_back(temp);
        }
        
        // put the numbers inside the answer vector
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[i].size();j++)
            {
                if(checking(board,i,j))
                {
                    ans[i][j] = 1;
                }
                else{
                    ans[i][j] = 0;
                }
            }
        }
        
        board = ans;
        
        
    }
};
