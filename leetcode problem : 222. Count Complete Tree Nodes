222. Count Complete Tree Nodes

/*


Runtime: 60 ms, faster than 35.69% of C++ online submissions for Count Complete Tree Nodes.
Memory Usage: 30.8 MB, less than 63.58% of C++ online submissions for Count Complete Tree Nodes.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int findLeftHeight(TreeNode*root)
    {
        if(!root) return 0;
        return 1+findLeftHeight(root->left);
    }
    
    int findRightHeight(TreeNode * root)
    {
        if(!root) return 0;
        return 1 + findRightHeight(root->right);
    }
    
    
    int countNodes(TreeNode* root) {
        if(!root) return 0;
      int leftHeight = findLeftHeight(root);
        int rightHeight = findRightHeight(root);
        
        if( leftHeight == rightHeight)
        {
             
         return pow(2,leftHeight) - 1 ;
           
        }
        else{
           return 1 + countNodes(root->left) + countNodes(root->right); 
        }
    }
};
