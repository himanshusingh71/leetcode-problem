1382. Balance a Binary Search Tree

/*
Runtime: 174 ms, faster than 55.83% of C++ online submissions for Balance a Binary Search Tree.
Memory Usage: 63.3 MB, less than 44.57% of C++ online submissions for Balance a Binary Search Tree.
*/

class Solution {
public:
    vector<int> elements;
      TreeNode * create(int l,int r,vector<int> & nums,TreeNode * root)
    {
        if(r>l)
        {
            int mid = (l+r)/2;
            root = new TreeNode(nums[mid]);
            root->left = create(l,mid,nums,root->left);
            root->right = create(mid+1,r,nums,root->right);
        }
        return root;
    }
    void dfs(TreeNode * root)
    {
        if(!root) return;
        dfs(root->left);
        elements.push_back(root->val);
        dfs(root->right);
    }
    TreeNode* balanceBST(TreeNode* root) {
        dfs(root);
       TreeNode * r;
        return create(0,elements.size(),elements,r);
    }
};
